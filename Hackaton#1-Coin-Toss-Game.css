*{
    padding: 0;
    margin: 0;
    box-sizing: border-box;
    font-family: "Rubik",sans-serif;
}

body{
    height: 100%;
    background: #1f5a82;
}

.container{
    background-color: #ffffff;
    width: 400px;
    padding: 35px;
    position: absolute;
    transform: translate(-50%,-50%);
    top: 50%;
    left: 50%;
    box-shadow: 15px 30px 35px rgba(0,0,0,0.1);
    border-radius: 10px;
    -webkit-perspective: 300px;
    perspective: 300px;
}

.coin{
    height: 150px;
    width: 150px;
    position: relative;
    margin: 32px auto;
    -webkit-transform-style: preserve-3d;
    transform-style: preserve-3d;
}
.coin img{
    width: 145px;
}
.heads,.tails{
    position: absolute;
    width: 100%;
    height: 100%;
    -webkit-backface-visibility: hidden;
    backface-visibility: hidden;
}
.tails{
    transform: rotateX(180deg);
}

.coin{
    height: 150px;
    width: 150px;
    position: relative;
    margin: 32px auto;
    -webkit-transform-style: preserve-3d;
    transform-style: preserve-3d;
}
.coin img{
    width: 145px;
}
.heads,.tails{
    position: absolute;
    width: 100%;
    height: 100%;
    -webkit-backface-visibility: hidden;
    backface-visibility: hidden;
}
.tails{
    transform: rotateX(180deg);;
}

@keyframes spin-tails{
    0%{
        transform: rotateX(0);
    }
    100%{
        transform: rotateX(1980deg);
    }
}
@keyframes spin-heads{
    0%{
        transform: rotate(0);
    }
    100%{
        transform: rotate(2160deg);
    }
}

.stats{
    display: flex;
    color: #101020;
    font-weight: 500;
    padding: 20px;
    margin-bottom: 40px;
    margin-top: 55px;
    box-shadow: 0 0 20px rgba(0,139,253,0.25);
}

.stats p:nth-last-child(1){
    margin-left: 50%;
}

.buttons{
    display: flex;
    justify-content: space-between;
}
button{
    width: 150px;
    padding: 15px 0;
    border: none;
    font-size: 16px;
    border-radius: 5px;
    cursor: pointer;
}

#flip-button{
    background-color: #053469;
    color: #ffffff;
}

#reset-button{
    background-color: #674706;
    color: white;
}

#flip-button:disabled{
    background-color: #e1e0ee;
    border-color: #e1e0ee;
    color: #101020;
}


h1{
    color: deeppink;
    display: flex;
    justify-content: center;
    margin-top: 30px;
}

footer{
    color: deeppink;
    font-size: 40px;
    justify-content: center;
    display: flex;
    margin-top: 570px;
    margin-left: -60px;
}

span{
    margin-top: 30px;
    display: flex;
    justify-content:center;
    margin-left: -180px;
}
/*The * selector selects all elements.*/
/*The * selector can also select all elements inside another element (See "More Examples").*/
/*The transform property applies a 2D or 3D transformation to an element. This property allows you to rotate, scale,
move, skew, etc., elements.
 */
/*The perspective property is used to give a 3D-positioned element some perspective.The perspective property defines
how far the object is away from the user. So, a lower value will result in a more intensive 3D effect than a higher value.
 */
/*When defining the perspective property for an element, it is the CHILD elements that get the perspective view,
NOT the element itself.
 */
/*The transform-style property specifies how nested elements are rendered in 3D space.
 */
/*The backface-visibility property defines whether or not the back face of an element should be visible when
facing the user.The back face of an element is a mirror image of the front face being displayed.
This property is useful when an element is rotated. It lets you choose if the user should see the back face or not.
 */
/*La fonction rotate() définit une transformation qui déplace un élément autour d'un point fixe (défini par
la propriété transform-origin) sans le déformer (autrement dit, qui applique une rotation plane). C'est une rotation
autour de ce point. Par défaut, cette origine correspond au centre de l'élément.
 */

/*When you click on that button, the background color and text color of this button will change for three seconds.


